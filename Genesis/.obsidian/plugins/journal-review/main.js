/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/obsidian-daily-notes-interface/dist/main.js
var require_main = __commonJS({
  "node_modules/obsidian-daily-notes-interface/dist/main.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var obsidian = require("obsidian");
    var DEFAULT_DAILY_NOTE_FORMAT = "YYYY-MM-DD";
    var DEFAULT_WEEKLY_NOTE_FORMAT = "gggg-[W]ww";
    var DEFAULT_MONTHLY_NOTE_FORMAT = "YYYY-MM";
    var DEFAULT_QUARTERLY_NOTE_FORMAT = "YYYY-[Q]Q";
    var DEFAULT_YEARLY_NOTE_FORMAT = "YYYY";
    function shouldUsePeriodicNotesSettings(periodicity) {
      var _a, _b;
      const periodicNotes = window.app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a[periodicity]) == null ? void 0 : _b.enabled);
    }
    function getDailyNoteSettings() {
      var _a, _b, _c, _d;
      try {
        const { internalPlugins, plugins } = window.app;
        if (shouldUsePeriodicNotesSettings("daily")) {
          const { format: format2, folder: folder2, template: template2 } = ((_b = (_a = plugins.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.daily) || {};
          return {
            format: format2 || DEFAULT_DAILY_NOTE_FORMAT,
            folder: (folder2 == null ? void 0 : folder2.trim()) || "",
            template: (template2 == null ? void 0 : template2.trim()) || ""
          };
        }
        const { folder, format, template } = ((_d = (_c = internalPlugins.getPluginById("daily-notes")) == null ? void 0 : _c.instance) == null ? void 0 : _d.options) || {};
        return {
          format: format || DEFAULT_DAILY_NOTE_FORMAT,
          folder: (folder == null ? void 0 : folder.trim()) || "",
          template: (template == null ? void 0 : template.trim()) || ""
        };
      } catch (err) {
        console.info("No custom daily note settings found!", err);
      }
    }
    function getWeeklyNoteSettings() {
      var _a, _b, _c, _d, _e, _f, _g;
      try {
        const pluginManager = window.app.plugins;
        const calendarSettings = (_a = pluginManager.getPlugin("calendar")) == null ? void 0 : _a.options;
        const periodicNotesSettings = (_c = (_b = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _b.settings) == null ? void 0 : _c.weekly;
        if (shouldUsePeriodicNotesSettings("weekly")) {
          return {
            format: periodicNotesSettings.format || DEFAULT_WEEKLY_NOTE_FORMAT,
            folder: ((_d = periodicNotesSettings.folder) == null ? void 0 : _d.trim()) || "",
            template: ((_e = periodicNotesSettings.template) == null ? void 0 : _e.trim()) || ""
          };
        }
        const settings = calendarSettings || {};
        return {
          format: settings.weeklyNoteFormat || DEFAULT_WEEKLY_NOTE_FORMAT,
          folder: ((_f = settings.weeklyNoteFolder) == null ? void 0 : _f.trim()) || "",
          template: ((_g = settings.weeklyNoteTemplate) == null ? void 0 : _g.trim()) || ""
        };
      } catch (err) {
        console.info("No custom weekly note settings found!", err);
      }
    }
    function getMonthlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("monthly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.monthly) || {};
        return {
          format: settings.format || DEFAULT_MONTHLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom monthly note settings found!", err);
      }
    }
    function getQuarterlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("quarterly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.quarterly) || {};
        return {
          format: settings.format || DEFAULT_QUARTERLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom quarterly note settings found!", err);
      }
    }
    function getYearlyNoteSettings() {
      var _a, _b, _c, _d;
      const pluginManager = window.app.plugins;
      try {
        const settings = shouldUsePeriodicNotesSettings("yearly") && ((_b = (_a = pluginManager.getPlugin("periodic-notes")) == null ? void 0 : _a.settings) == null ? void 0 : _b.yearly) || {};
        return {
          format: settings.format || DEFAULT_YEARLY_NOTE_FORMAT,
          folder: ((_c = settings.folder) == null ? void 0 : _c.trim()) || "",
          template: ((_d = settings.template) == null ? void 0 : _d.trim()) || ""
        };
      } catch (err) {
        console.info("No custom yearly note settings found!", err);
      }
    }
    function join(...partSegments) {
      let parts = [];
      for (let i4 = 0, l3 = partSegments.length; i4 < l3; i4++) {
        parts = parts.concat(partSegments[i4].split("/"));
      }
      const newParts = [];
      for (let i4 = 0, l3 = parts.length; i4 < l3; i4++) {
        const part = parts[i4];
        if (!part || part === ".")
          continue;
        else
          newParts.push(part);
      }
      if (parts[0] === "")
        newParts.unshift("");
      return newParts.join("/");
    }
    function basename(fullPath) {
      let base = fullPath.substring(fullPath.lastIndexOf("/") + 1);
      if (base.lastIndexOf(".") != -1)
        base = base.substring(0, base.lastIndexOf("."));
      return base;
    }
    async function ensureFolderExists(path) {
      const dirs = path.replace(/\\/g, "/").split("/");
      dirs.pop();
      if (dirs.length) {
        const dir = join(...dirs);
        if (!window.app.vault.getAbstractFileByPath(dir)) {
          await window.app.vault.createFolder(dir);
        }
      }
    }
    async function getNotePath(directory, filename) {
      if (!filename.endsWith(".md")) {
        filename += ".md";
      }
      const path = obsidian.normalizePath(join(directory, filename));
      await ensureFolderExists(path);
      return path;
    }
    async function getTemplateInfo(template) {
      const { metadataCache, vault } = window.app;
      const templatePath = obsidian.normalizePath(template);
      if (templatePath === "/") {
        return Promise.resolve(["", null]);
      }
      try {
        const templateFile = metadataCache.getFirstLinkpathDest(templatePath, "");
        const contents = await vault.cachedRead(templateFile);
        const IFoldInfo = window.app.foldManager.load(templateFile);
        return [contents, IFoldInfo];
      } catch (err) {
        console.error(`Failed to read the daily note template '${templatePath}'`, err);
        new obsidian.Notice("Failed to read the daily note template");
        return ["", null];
      }
    }
    function getDateUID(date, granularity = "day") {
      const ts = date.clone().startOf(granularity).format();
      return `${granularity}-${ts}`;
    }
    function removeEscapedCharacters(format) {
      return format.replace(/\[[^\]]*\]/g, "");
    }
    function isFormatAmbiguous(format, granularity) {
      if (granularity === "week") {
        const cleanFormat = removeEscapedCharacters(format);
        return /w{1,2}/i.test(cleanFormat) && (/M{1,4}/.test(cleanFormat) || /D{1,4}/.test(cleanFormat));
      }
      return false;
    }
    function getDateFromFile3(file, granularity) {
      return getDateFromFilename(file.basename, granularity);
    }
    function getDateFromPath(path, granularity) {
      return getDateFromFilename(basename(path), granularity);
    }
    function getDateFromFilename(filename, granularity) {
      const getSettings = {
        day: getDailyNoteSettings,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      };
      const format = getSettings[granularity]().format.split("/").pop();
      const noteDate = window.moment(filename, format, true);
      if (!noteDate.isValid()) {
        return null;
      }
      if (isFormatAmbiguous(format, granularity)) {
        if (granularity === "week") {
          const cleanFormat = removeEscapedCharacters(format);
          if (/w{1,2}/i.test(cleanFormat)) {
            return window.moment(
              filename,
              // If format contains week, remove day & month formatting
              format.replace(/M{1,4}/g, "").replace(/D{1,4}/g, ""),
              false
            );
          }
        }
      }
      return noteDate;
    }
    var DailyNotesFolderMissingError = class extends Error {
    };
    async function createDailyNote(date) {
      const app = window.app;
      const { vault } = app;
      const moment3 = window.moment;
      const { template, format, folder } = getDailyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, moment3().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = moment3();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*yesterday\s*}}/gi, date.clone().subtract(1, "day").format(format)).replace(/{{\s*tomorrow\s*}}/gi, date.clone().add(1, "d").format(format)));
        app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getDailyNote2(date, dailyNotes) {
      var _a;
      return (_a = dailyNotes[getDateUID(date, "day")]) != null ? _a : null;
    }
    function getAllDailyNotes4() {
      const { vault } = window.app;
      const { folder } = getDailyNoteSettings();
      const dailyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!dailyNotesFolder) {
        throw new DailyNotesFolderMissingError("Failed to find daily notes folder");
      }
      const dailyNotes = {};
      obsidian.Vault.recurseChildren(dailyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile3(note, "day");
          if (date) {
            const dateString = getDateUID(date, "day");
            dailyNotes[dateString] = note;
          }
        }
      });
      return dailyNotes;
    }
    var WeeklyNotesFolderMissingError = class extends Error {
    };
    function getDaysOfWeek() {
      const { moment: moment3 } = window;
      let weekStart = moment3.localeData()._week.dow;
      const daysOfWeek = [
        "sunday",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday"
      ];
      while (weekStart) {
        daysOfWeek.push(daysOfWeek.shift());
        weekStart--;
      }
      return daysOfWeek;
    }
    function getDayOfWeekNumericalValue(dayOfWeekName) {
      return getDaysOfWeek().indexOf(dayOfWeekName.toLowerCase());
    }
    async function createWeeklyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getWeeklyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*title\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi, (_, dayOfWeek, momentFormat) => {
          const day = getDayOfWeekNumericalValue(dayOfWeek);
          return date.weekday(day).format(momentFormat.trim());
        }));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getWeeklyNote(date, weeklyNotes) {
      var _a;
      return (_a = weeklyNotes[getDateUID(date, "week")]) != null ? _a : null;
    }
    function getAllWeeklyNotes() {
      const weeklyNotes = {};
      if (!appHasWeeklyNotesPluginLoaded()) {
        return weeklyNotes;
      }
      const { vault } = window.app;
      const { folder } = getWeeklyNoteSettings();
      const weeklyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!weeklyNotesFolder) {
        throw new WeeklyNotesFolderMissingError("Failed to find weekly notes folder");
      }
      obsidian.Vault.recurseChildren(weeklyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile3(note, "week");
          if (date) {
            const dateString = getDateUID(date, "week");
            weeklyNotes[dateString] = note;
          }
        }
      });
      return weeklyNotes;
    }
    var MonthlyNotesFolderMissingError = class extends Error {
    };
    async function createMonthlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getMonthlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getMonthlyNote(date, monthlyNotes) {
      var _a;
      return (_a = monthlyNotes[getDateUID(date, "month")]) != null ? _a : null;
    }
    function getAllMonthlyNotes() {
      const monthlyNotes = {};
      if (!appHasMonthlyNotesPluginLoaded()) {
        return monthlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getMonthlyNoteSettings();
      const monthlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!monthlyNotesFolder) {
        throw new MonthlyNotesFolderMissingError("Failed to find monthly notes folder");
      }
      obsidian.Vault.recurseChildren(monthlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile3(note, "month");
          if (date) {
            const dateString = getDateUID(date, "month");
            monthlyNotes[dateString] = note;
          }
        }
      });
      return monthlyNotes;
    }
    var QuarterlyNotesFolderMissingError = class extends Error {
    };
    async function createQuarterlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getQuarterlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getQuarterlyNote(date, quarterly) {
      var _a;
      return (_a = quarterly[getDateUID(date, "quarter")]) != null ? _a : null;
    }
    function getAllQuarterlyNotes() {
      const quarterly = {};
      if (!appHasQuarterlyNotesPluginLoaded()) {
        return quarterly;
      }
      const { vault } = window.app;
      const { folder } = getQuarterlyNoteSettings();
      const quarterlyFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!quarterlyFolder) {
        throw new QuarterlyNotesFolderMissingError("Failed to find quarterly notes folder");
      }
      obsidian.Vault.recurseChildren(quarterlyFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile3(note, "quarter");
          if (date) {
            const dateString = getDateUID(date, "quarter");
            quarterly[dateString] = note;
          }
        }
      });
      return quarterly;
    }
    var YearlyNotesFolderMissingError = class extends Error {
    };
    async function createYearlyNote(date) {
      const { vault } = window.app;
      const { template, format, folder } = getYearlyNoteSettings();
      const [templateContents, IFoldInfo] = await getTemplateInfo(template);
      const filename = date.format(format);
      const normalizedPath = await getNotePath(folder, filename);
      try {
        const createdFile = await vault.create(normalizedPath, templateContents.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi, (_, _timeOrDate, calc, timeDelta, unit, momentFormat) => {
          const now = window.moment();
          const currentDate = date.clone().set({
            hour: now.get("hour"),
            minute: now.get("minute"),
            second: now.get("second")
          });
          if (calc) {
            currentDate.add(parseInt(timeDelta, 10), unit);
          }
          if (momentFormat) {
            return currentDate.format(momentFormat.substring(1).trim());
          }
          return currentDate.format(format);
        }).replace(/{{\s*date\s*}}/gi, filename).replace(/{{\s*time\s*}}/gi, window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi, filename));
        window.app.foldManager.save(createdFile, IFoldInfo);
        return createdFile;
      } catch (err) {
        console.error(`Failed to create file: '${normalizedPath}'`, err);
        new obsidian.Notice("Unable to create new file.");
      }
    }
    function getYearlyNote(date, yearlyNotes) {
      var _a;
      return (_a = yearlyNotes[getDateUID(date, "year")]) != null ? _a : null;
    }
    function getAllYearlyNotes() {
      const yearlyNotes = {};
      if (!appHasYearlyNotesPluginLoaded()) {
        return yearlyNotes;
      }
      const { vault } = window.app;
      const { folder } = getYearlyNoteSettings();
      const yearlyNotesFolder = vault.getAbstractFileByPath(obsidian.normalizePath(folder));
      if (!yearlyNotesFolder) {
        throw new YearlyNotesFolderMissingError("Failed to find yearly notes folder");
      }
      obsidian.Vault.recurseChildren(yearlyNotesFolder, (note) => {
        if (note instanceof obsidian.TFile) {
          const date = getDateFromFile3(note, "year");
          if (date) {
            const dateString = getDateUID(date, "year");
            yearlyNotes[dateString] = note;
          }
        }
      });
      return yearlyNotes;
    }
    function appHasDailyNotesPluginLoaded2() {
      var _a, _b;
      const { app } = window;
      const dailyNotesPlugin = app.internalPlugins.plugins["daily-notes"];
      if (dailyNotesPlugin && dailyNotesPlugin.enabled) {
        return true;
      }
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.daily) == null ? void 0 : _b.enabled);
    }
    function appHasWeeklyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      if (app.plugins.getPlugin("calendar")) {
        return true;
      }
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.weekly) == null ? void 0 : _b.enabled);
    }
    function appHasMonthlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.monthly) == null ? void 0 : _b.enabled);
    }
    function appHasQuarterlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.quarterly) == null ? void 0 : _b.enabled);
    }
    function appHasYearlyNotesPluginLoaded() {
      var _a, _b;
      const { app } = window;
      const periodicNotes = app.plugins.getPlugin("periodic-notes");
      return periodicNotes && ((_b = (_a = periodicNotes.settings) == null ? void 0 : _a.yearly) == null ? void 0 : _b.enabled);
    }
    function getPeriodicNoteSettings(granularity) {
      const getSettings = {
        day: getDailyNoteSettings,
        week: getWeeklyNoteSettings,
        month: getMonthlyNoteSettings,
        quarter: getQuarterlyNoteSettings,
        year: getYearlyNoteSettings
      }[granularity];
      return getSettings();
    }
    function createPeriodicNote(granularity, date) {
      const createFn = {
        day: createDailyNote,
        month: createMonthlyNote,
        week: createWeeklyNote
      };
      return createFn[granularity](date);
    }
    exports.DEFAULT_DAILY_NOTE_FORMAT = DEFAULT_DAILY_NOTE_FORMAT;
    exports.DEFAULT_MONTHLY_NOTE_FORMAT = DEFAULT_MONTHLY_NOTE_FORMAT;
    exports.DEFAULT_QUARTERLY_NOTE_FORMAT = DEFAULT_QUARTERLY_NOTE_FORMAT;
    exports.DEFAULT_WEEKLY_NOTE_FORMAT = DEFAULT_WEEKLY_NOTE_FORMAT;
    exports.DEFAULT_YEARLY_NOTE_FORMAT = DEFAULT_YEARLY_NOTE_FORMAT;
    exports.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded2;
    exports.appHasMonthlyNotesPluginLoaded = appHasMonthlyNotesPluginLoaded;
    exports.appHasQuarterlyNotesPluginLoaded = appHasQuarterlyNotesPluginLoaded;
    exports.appHasWeeklyNotesPluginLoaded = appHasWeeklyNotesPluginLoaded;
    exports.appHasYearlyNotesPluginLoaded = appHasYearlyNotesPluginLoaded;
    exports.createDailyNote = createDailyNote;
    exports.createMonthlyNote = createMonthlyNote;
    exports.createPeriodicNote = createPeriodicNote;
    exports.createQuarterlyNote = createQuarterlyNote;
    exports.createWeeklyNote = createWeeklyNote;
    exports.createYearlyNote = createYearlyNote;
    exports.getAllDailyNotes = getAllDailyNotes4;
    exports.getAllMonthlyNotes = getAllMonthlyNotes;
    exports.getAllQuarterlyNotes = getAllQuarterlyNotes;
    exports.getAllWeeklyNotes = getAllWeeklyNotes;
    exports.getAllYearlyNotes = getAllYearlyNotes;
    exports.getDailyNote = getDailyNote2;
    exports.getDailyNoteSettings = getDailyNoteSettings;
    exports.getDateFromFile = getDateFromFile3;
    exports.getDateFromPath = getDateFromPath;
    exports.getDateUID = getDateUID;
    exports.getMonthlyNote = getMonthlyNote;
    exports.getMonthlyNoteSettings = getMonthlyNoteSettings;
    exports.getPeriodicNoteSettings = getPeriodicNoteSettings;
    exports.getQuarterlyNote = getQuarterlyNote;
    exports.getQuarterlyNoteSettings = getQuarterlyNoteSettings;
    exports.getTemplateInfo = getTemplateInfo;
    exports.getWeeklyNote = getWeeklyNote;
    exports.getWeeklyNoteSettings = getWeeklyNoteSettings;
    exports.getYearlyNote = getYearlyNote;
    exports.getYearlyNoteSettings = getYearlyNoteSettings;
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JournalReviewPlugin,
  icon: () => icon
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");
var import_obsidian_daily_notes_interface3 = __toESM(require_main());

// src/view.tsx
var import_obsidian3 = require("obsidian");
var import_obsidian_daily_notes_interface2 = __toESM(require_main());

// node_modules/preact/dist/preact.module.js
var n;
var l;
var u;
var t;
var i;
var o;
var r;
var f;
var e;
var c = {};
var s = [];
var a = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var h = Array.isArray;
function v(n2, l3) {
  for (var u4 in l3)
    n2[u4] = l3[u4];
  return n2;
}
function p(n2) {
  var l3 = n2.parentNode;
  l3 && l3.removeChild(n2);
}
function y(l3, u4, t3) {
  var i4, o3, r3, f4 = {};
  for (r3 in u4)
    "key" == r3 ? i4 = u4[r3] : "ref" == r3 ? o3 = u4[r3] : f4[r3] = u4[r3];
  if (arguments.length > 2 && (f4.children = arguments.length > 3 ? n.call(arguments, 2) : t3), "function" == typeof l3 && null != l3.defaultProps)
    for (r3 in l3.defaultProps)
      void 0 === f4[r3] && (f4[r3] = l3.defaultProps[r3]);
  return d(l3, f4, i4, o3, null);
}
function d(n2, t3, i4, o3, r3) {
  var f4 = { type: n2, props: t3, key: i4, ref: o3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: null == r3 ? ++u : r3, __i: -1, __u: 0 };
  return null == r3 && null != l.vnode && l.vnode(f4), f4;
}
function g(n2) {
  return n2.children;
}
function b(n2, l3) {
  this.props = n2, this.context = l3;
}
function m(n2, l3) {
  if (null == l3)
    return n2.__ ? m(n2.__, n2.__i + 1) : null;
  for (var u4; l3 < n2.__k.length; l3++)
    if (null != (u4 = n2.__k[l3]) && null != u4.__e)
      return u4.__e;
  return "function" == typeof n2.type ? m(n2) : null;
}
function w(n2) {
  var l3, u4;
  if (null != (n2 = n2.__) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l3 = 0; l3 < n2.__k.length; l3++)
      if (null != (u4 = n2.__k[l3]) && null != u4.__e) {
        n2.__e = n2.__c.base = u4.__e;
        break;
      }
    return w(n2);
  }
}
function k(n2) {
  (!n2.__d && (n2.__d = true) && i.push(n2) && !x.__r++ || o !== l.debounceRendering) && ((o = l.debounceRendering) || r)(x);
}
function x() {
  var n2, u4, t3, o3, r3, e3, c3, s3, a3;
  for (i.sort(f); n2 = i.shift(); )
    n2.__d && (u4 = i.length, o3 = void 0, e3 = (r3 = (t3 = n2).__v).__e, s3 = [], a3 = [], (c3 = t3.__P) && ((o3 = v({}, r3)).__v = r3.__v + 1, l.vnode && l.vnode(o3), F(c3, o3, r3, t3.__n, void 0 !== c3.ownerSVGElement, 32 & r3.__u ? [e3] : null, s3, null == e3 ? m(r3) : e3, !!(32 & r3.__u), a3), o3.__v = r3.__v, o3.__.__k[o3.__i] = o3, L(s3, o3, a3), o3.__e != e3 && w(o3)), i.length > u4 && i.sort(f));
  x.__r = 0;
}
function C(n2, l3, u4, t3, i4, o3, r3, f4, e3, a3, h3) {
  var v3, p2, y2, d3, _, g2 = t3 && t3.__k || s, b2 = l3.length;
  for (u4.__d = e3, P(u4, l3, g2), e3 = u4.__d, v3 = 0; v3 < b2; v3++)
    null != (y2 = u4.__k[v3]) && "boolean" != typeof y2 && "function" != typeof y2 && (p2 = -1 === y2.__i ? c : g2[y2.__i] || c, y2.__i = v3, F(n2, y2, p2, i4, o3, r3, f4, e3, a3, h3), d3 = y2.__e, y2.ref && p2.ref != y2.ref && (p2.ref && O(p2.ref, null, y2), h3.push(y2.ref, y2.__c || d3, y2)), null == _ && null != d3 && (_ = d3), 65536 & y2.__u || p2.__k === y2.__k ? (d3 || p2.__e != e3 || (e3 = m(p2)), e3 = S(y2, e3, n2)) : "function" == typeof y2.type && void 0 !== y2.__d ? e3 = y2.__d : d3 && (e3 = d3.nextSibling), y2.__d = void 0, y2.__u &= -196609);
  u4.__d = e3, u4.__e = _;
}
function P(n2, l3, u4) {
  var t3, i4, o3, r3, f4, e3 = l3.length, c3 = u4.length, s3 = c3, a3 = 0;
  for (n2.__k = [], t3 = 0; t3 < e3; t3++)
    r3 = t3 + a3, null != (i4 = n2.__k[t3] = null == (i4 = l3[t3]) || "boolean" == typeof i4 || "function" == typeof i4 ? null : "string" == typeof i4 || "number" == typeof i4 || "bigint" == typeof i4 || i4.constructor == String ? d(null, i4, null, null, null) : h(i4) ? d(g, { children: i4 }, null, null, null) : void 0 === i4.constructor && i4.__b > 0 ? d(i4.type, i4.props, i4.key, i4.ref ? i4.ref : null, i4.__v) : i4) ? (i4.__ = n2, i4.__b = n2.__b + 1, f4 = I(i4, u4, r3, s3), i4.__i = f4, o3 = null, -1 !== f4 && (s3--, (o3 = u4[f4]) && (o3.__u |= 131072)), null == o3 || null === o3.__v ? (-1 == f4 && a3--, "function" != typeof i4.type && (i4.__u |= 65536)) : f4 !== r3 && (f4 === r3 + 1 ? a3++ : f4 > r3 ? s3 > e3 - r3 ? a3 += f4 - r3 : a3-- : f4 < r3 ? f4 == r3 - 1 && (a3 = f4 - r3) : a3 = 0, f4 !== t3 + a3 && (i4.__u |= 65536))) : (o3 = u4[r3]) && null == o3.key && o3.__e && 0 == (131072 & o3.__u) && (o3.__e == n2.__d && (n2.__d = m(o3)), j(o3, o3, false), u4[r3] = null, s3--);
  if (s3)
    for (t3 = 0; t3 < c3; t3++)
      null != (o3 = u4[t3]) && 0 == (131072 & o3.__u) && (o3.__e == n2.__d && (n2.__d = m(o3)), j(o3, o3));
}
function S(n2, l3, u4) {
  var t3, i4;
  if ("function" == typeof n2.type) {
    for (t3 = n2.__k, i4 = 0; t3 && i4 < t3.length; i4++)
      t3[i4] && (t3[i4].__ = n2, l3 = S(t3[i4], l3, u4));
    return l3;
  }
  n2.__e != l3 && (u4.insertBefore(n2.__e, l3 || null), l3 = n2.__e);
  do {
    l3 = l3 && l3.nextSibling;
  } while (null != l3 && 8 === l3.nodeType);
  return l3;
}
function I(n2, l3, u4, t3) {
  var i4 = n2.key, o3 = n2.type, r3 = u4 - 1, f4 = u4 + 1, e3 = l3[u4];
  if (null === e3 || e3 && i4 == e3.key && o3 === e3.type && 0 == (131072 & e3.__u))
    return u4;
  if (t3 > (null != e3 && 0 == (131072 & e3.__u) ? 1 : 0))
    for (; r3 >= 0 || f4 < l3.length; ) {
      if (r3 >= 0) {
        if ((e3 = l3[r3]) && 0 == (131072 & e3.__u) && i4 == e3.key && o3 === e3.type)
          return r3;
        r3--;
      }
      if (f4 < l3.length) {
        if ((e3 = l3[f4]) && 0 == (131072 & e3.__u) && i4 == e3.key && o3 === e3.type)
          return f4;
        f4++;
      }
    }
  return -1;
}
function H(n2, l3, u4) {
  "-" === l3[0] ? n2.setProperty(l3, null == u4 ? "" : u4) : n2[l3] = null == u4 ? "" : "number" != typeof u4 || a.test(l3) ? u4 : u4 + "px";
}
function T(n2, l3, u4, t3, i4) {
  var o3;
  n:
    if ("style" === l3)
      if ("string" == typeof u4)
        n2.style.cssText = u4;
      else {
        if ("string" == typeof t3 && (n2.style.cssText = t3 = ""), t3)
          for (l3 in t3)
            u4 && l3 in u4 || H(n2.style, l3, "");
        if (u4)
          for (l3 in u4)
            t3 && u4[l3] === t3[l3] || H(n2.style, l3, u4[l3]);
      }
    else if ("o" === l3[0] && "n" === l3[1])
      o3 = l3 !== (l3 = l3.replace(/(PointerCapture)$|Capture$/i, "$1")), l3 = l3.toLowerCase() in n2 || "onFocusOut" === l3 || "onFocusIn" === l3 ? l3.toLowerCase().slice(2) : l3.slice(2), n2.l || (n2.l = {}), n2.l[l3 + o3] = u4, u4 ? t3 ? u4.u = t3.u : (u4.u = Date.now(), n2.addEventListener(l3, o3 ? D : A, o3)) : n2.removeEventListener(l3, o3 ? D : A, o3);
    else {
      if (i4)
        l3 = l3.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" !== l3 && "height" !== l3 && "href" !== l3 && "list" !== l3 && "form" !== l3 && "tabIndex" !== l3 && "download" !== l3 && "rowSpan" !== l3 && "colSpan" !== l3 && "role" !== l3 && l3 in n2)
        try {
          n2[l3] = null == u4 ? "" : u4;
          break n;
        } catch (n3) {
        }
      "function" == typeof u4 || (null == u4 || false === u4 && "-" !== l3[4] ? n2.removeAttribute(l3) : n2.setAttribute(l3, u4));
    }
}
function A(n2) {
  if (this.l) {
    var u4 = this.l[n2.type + false];
    if (n2.t) {
      if (n2.t <= u4.u)
        return;
    } else
      n2.t = Date.now();
    return u4(l.event ? l.event(n2) : n2);
  }
}
function D(n2) {
  if (this.l)
    return this.l[n2.type + true](l.event ? l.event(n2) : n2);
}
function F(n2, u4, t3, i4, o3, r3, f4, e3, c3, s3) {
  var a3, p2, y2, d3, _, m3, w3, k3, x2, P3, S2, $, I2, H2, T2, A2 = u4.type;
  if (void 0 !== u4.constructor)
    return null;
  128 & t3.__u && (c3 = !!(32 & t3.__u), r3 = [e3 = u4.__e = t3.__e]), (a3 = l.__b) && a3(u4);
  n:
    if ("function" == typeof A2)
      try {
        if (k3 = u4.props, x2 = (a3 = A2.contextType) && i4[a3.__c], P3 = a3 ? x2 ? x2.props.value : a3.__ : i4, t3.__c ? w3 = (p2 = u4.__c = t3.__c).__ = p2.__E : ("prototype" in A2 && A2.prototype.render ? u4.__c = p2 = new A2(k3, P3) : (u4.__c = p2 = new b(k3, P3), p2.constructor = A2, p2.render = z), x2 && x2.sub(p2), p2.props = k3, p2.state || (p2.state = {}), p2.context = P3, p2.__n = i4, y2 = p2.__d = true, p2.__h = [], p2._sb = []), null == p2.__s && (p2.__s = p2.state), null != A2.getDerivedStateFromProps && (p2.__s == p2.state && (p2.__s = v({}, p2.__s)), v(p2.__s, A2.getDerivedStateFromProps(k3, p2.__s))), d3 = p2.props, _ = p2.state, p2.__v = u4, y2)
          null == A2.getDerivedStateFromProps && null != p2.componentWillMount && p2.componentWillMount(), null != p2.componentDidMount && p2.__h.push(p2.componentDidMount);
        else {
          if (null == A2.getDerivedStateFromProps && k3 !== d3 && null != p2.componentWillReceiveProps && p2.componentWillReceiveProps(k3, P3), !p2.__e && (null != p2.shouldComponentUpdate && false === p2.shouldComponentUpdate(k3, p2.__s, P3) || u4.__v === t3.__v)) {
            for (u4.__v !== t3.__v && (p2.props = k3, p2.state = p2.__s, p2.__d = false), u4.__e = t3.__e, u4.__k = t3.__k, u4.__k.forEach(function(n3) {
              n3 && (n3.__ = u4);
            }), S2 = 0; S2 < p2._sb.length; S2++)
              p2.__h.push(p2._sb[S2]);
            p2._sb = [], p2.__h.length && f4.push(p2);
            break n;
          }
          null != p2.componentWillUpdate && p2.componentWillUpdate(k3, p2.__s, P3), null != p2.componentDidUpdate && p2.__h.push(function() {
            p2.componentDidUpdate(d3, _, m3);
          });
        }
        if (p2.context = P3, p2.props = k3, p2.__P = n2, p2.__e = false, $ = l.__r, I2 = 0, "prototype" in A2 && A2.prototype.render) {
          for (p2.state = p2.__s, p2.__d = false, $ && $(u4), a3 = p2.render(p2.props, p2.state, p2.context), H2 = 0; H2 < p2._sb.length; H2++)
            p2.__h.push(p2._sb[H2]);
          p2._sb = [];
        } else
          do {
            p2.__d = false, $ && $(u4), a3 = p2.render(p2.props, p2.state, p2.context), p2.state = p2.__s;
          } while (p2.__d && ++I2 < 25);
        p2.state = p2.__s, null != p2.getChildContext && (i4 = v(v({}, i4), p2.getChildContext())), y2 || null == p2.getSnapshotBeforeUpdate || (m3 = p2.getSnapshotBeforeUpdate(d3, _)), C(n2, h(T2 = null != a3 && a3.type === g && null == a3.key ? a3.props.children : a3) ? T2 : [T2], u4, t3, i4, o3, r3, f4, e3, c3, s3), p2.base = u4.__e, u4.__u &= -161, p2.__h.length && f4.push(p2), w3 && (p2.__E = p2.__ = null);
      } catch (n3) {
        u4.__v = null, c3 || null != r3 ? (u4.__e = e3, u4.__u |= c3 ? 160 : 32, r3[r3.indexOf(e3)] = null) : (u4.__e = t3.__e, u4.__k = t3.__k), l.__e(n3, u4, t3);
      }
    else
      null == r3 && u4.__v === t3.__v ? (u4.__k = t3.__k, u4.__e = t3.__e) : u4.__e = M(t3.__e, u4, t3, i4, o3, r3, f4, c3, s3);
  (a3 = l.diffed) && a3(u4);
}
function L(n2, u4, t3) {
  u4.__d = void 0;
  for (var i4 = 0; i4 < t3.length; i4++)
    O(t3[i4], t3[++i4], t3[++i4]);
  l.__c && l.__c(u4, n2), n2.some(function(u5) {
    try {
      n2 = u5.__h, u5.__h = [], n2.some(function(n3) {
        n3.call(u5);
      });
    } catch (n3) {
      l.__e(n3, u5.__v);
    }
  });
}
function M(l3, u4, t3, i4, o3, r3, f4, e3, s3) {
  var a3, v3, y2, d3, _, g2, b2, w3 = t3.props, k3 = u4.props, x2 = u4.type;
  if ("svg" === x2 && (o3 = true), null != r3) {
    for (a3 = 0; a3 < r3.length; a3++)
      if ((_ = r3[a3]) && "setAttribute" in _ == !!x2 && (x2 ? _.localName === x2 : 3 === _.nodeType)) {
        l3 = _, r3[a3] = null;
        break;
      }
  }
  if (null == l3) {
    if (null === x2)
      return document.createTextNode(k3);
    l3 = o3 ? document.createElementNS("http://www.w3.org/2000/svg", x2) : document.createElement(x2, k3.is && k3), r3 = null, e3 = false;
  }
  if (null === x2)
    w3 === k3 || e3 && l3.data === k3 || (l3.data = k3);
  else {
    if (r3 = r3 && n.call(l3.childNodes), w3 = t3.props || c, !e3 && null != r3)
      for (w3 = {}, a3 = 0; a3 < l3.attributes.length; a3++)
        w3[(_ = l3.attributes[a3]).name] = _.value;
    for (a3 in w3)
      _ = w3[a3], "children" == a3 || ("dangerouslySetInnerHTML" == a3 ? y2 = _ : "key" === a3 || a3 in k3 || T(l3, a3, null, _, o3));
    for (a3 in k3)
      _ = k3[a3], "children" == a3 ? d3 = _ : "dangerouslySetInnerHTML" == a3 ? v3 = _ : "value" == a3 ? g2 = _ : "checked" == a3 ? b2 = _ : "key" === a3 || e3 && "function" != typeof _ || w3[a3] === _ || T(l3, a3, _, w3[a3], o3);
    if (v3)
      e3 || y2 && (v3.__html === y2.__html || v3.__html === l3.innerHTML) || (l3.innerHTML = v3.__html), u4.__k = [];
    else if (y2 && (l3.innerHTML = ""), C(l3, h(d3) ? d3 : [d3], u4, t3, i4, o3 && "foreignObject" !== x2, r3, f4, r3 ? r3[0] : t3.__k && m(t3, 0), e3, s3), null != r3)
      for (a3 = r3.length; a3--; )
        null != r3[a3] && p(r3[a3]);
    e3 || (a3 = "value", void 0 !== g2 && (g2 !== l3[a3] || "progress" === x2 && !g2 || "option" === x2 && g2 !== w3[a3]) && T(l3, a3, g2, w3[a3], false), a3 = "checked", void 0 !== b2 && b2 !== l3[a3] && T(l3, a3, b2, w3[a3], false));
  }
  return l3;
}
function O(n2, u4, t3) {
  try {
    "function" == typeof n2 ? n2(u4) : n2.current = u4;
  } catch (n3) {
    l.__e(n3, t3);
  }
}
function j(n2, u4, t3) {
  var i4, o3;
  if (l.unmount && l.unmount(n2), (i4 = n2.ref) && (i4.current && i4.current !== n2.__e || O(i4, null, u4)), null != (i4 = n2.__c)) {
    if (i4.componentWillUnmount)
      try {
        i4.componentWillUnmount();
      } catch (n3) {
        l.__e(n3, u4);
      }
    i4.base = i4.__P = null, n2.__c = void 0;
  }
  if (i4 = n2.__k)
    for (o3 = 0; o3 < i4.length; o3++)
      i4[o3] && j(i4[o3], u4, t3 || "function" != typeof n2.type);
  t3 || null == n2.__e || p(n2.__e), n2.__ = n2.__e = n2.__d = void 0;
}
function z(n2, l3, u4) {
  return this.constructor(n2, u4);
}
function N(u4, t3, i4) {
  var o3, r3, f4, e3;
  l.__ && l.__(u4, t3), r3 = (o3 = "function" == typeof i4) ? null : i4 && i4.__k || t3.__k, f4 = [], e3 = [], F(t3, u4 = (!o3 && i4 || t3).__k = y(g, null, [u4]), r3 || c, c, void 0 !== t3.ownerSVGElement, !o3 && i4 ? [i4] : r3 ? null : t3.firstChild ? n.call(t3.childNodes) : null, f4, !o3 && i4 ? i4 : r3 ? r3.__e : t3.firstChild, o3, e3), L(f4, u4, e3);
}
function B(l3, u4, t3) {
  var i4, o3, r3, f4, e3 = v({}, l3.props);
  for (r3 in l3.type && l3.type.defaultProps && (f4 = l3.type.defaultProps), u4)
    "key" == r3 ? i4 = u4[r3] : "ref" == r3 ? o3 = u4[r3] : e3[r3] = void 0 === u4[r3] && void 0 !== f4 ? f4[r3] : u4[r3];
  return arguments.length > 2 && (e3.children = arguments.length > 3 ? n.call(arguments, 2) : t3), d(l3.type, e3, i4 || l3.key, o3 || l3.ref, null);
}
function E(n2, l3) {
  var u4 = { __c: l3 = "__cC" + e++, __: n2, Consumer: function(n3, l4) {
    return n3.children(l4);
  }, Provider: function(n3) {
    var u5, t3;
    return this.getChildContext || (u5 = [], (t3 = {})[l3] = this, this.getChildContext = function() {
      return t3;
    }, this.shouldComponentUpdate = function(n4) {
      this.props.value !== n4.value && u5.some(function(n5) {
        n5.__e = true, k(n5);
      });
    }, this.sub = function(n4) {
      u5.push(n4);
      var l4 = n4.componentWillUnmount;
      n4.componentWillUnmount = function() {
        u5.splice(u5.indexOf(n4), 1), l4 && l4.call(n4);
      };
    }), n3.children;
  } };
  return u4.Provider.__ = u4.Consumer.contextType = u4;
}
n = s.slice, l = { __e: function(n2, l3, u4, t3) {
  for (var i4, o3, r3; l3 = l3.__; )
    if ((i4 = l3.__c) && !i4.__)
      try {
        if ((o3 = i4.constructor) && null != o3.getDerivedStateFromError && (i4.setState(o3.getDerivedStateFromError(n2)), r3 = i4.__d), null != i4.componentDidCatch && (i4.componentDidCatch(n2, t3 || {}), r3 = i4.__d), r3)
          return i4.__E = i4;
      } catch (l4) {
        n2 = l4;
      }
  throw n2;
} }, u = 0, t = function(n2) {
  return null != n2 && null == n2.constructor;
}, b.prototype.setState = function(n2, l3) {
  var u4;
  u4 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = v({}, this.state), "function" == typeof n2 && (n2 = n2(v({}, u4), this.props)), n2 && v(u4, n2), null != n2 && this.__v && (l3 && this._sb.push(l3), k(this));
}, b.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), k(this));
}, b.prototype.render = g, i = [], r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, f = function(n2, l3) {
  return n2.__v.__b - l3.__v.__b;
}, x.__r = 0, e = 0;

// node_modules/preact/hooks/dist/hooks.module.js
var t2;
var r2;
var u2;
var i2;
var o2 = 0;
var f2 = [];
var c2 = [];
var e2 = l;
var a2 = e2.__b;
var v2 = e2.__r;
var l2 = e2.diffed;
var m2 = e2.__c;
var s2 = e2.unmount;
var d2 = e2.__;
function h2(n2, t3) {
  e2.__h && e2.__h(r2, n2, o2 || t3), o2 = 0;
  var u4 = r2.__H || (r2.__H = { __: [], __h: [] });
  return n2 >= u4.__.length && u4.__.push({ __V: c2 }), u4.__[n2];
}
function F2(n2) {
  return o2 = 5, q(function() {
    return { current: n2 };
  }, []);
}
function q(n2, r3) {
  var u4 = h2(t2++, 7);
  return C2(u4.__H, r3) ? (u4.__V = n2(), u4.i = r3, u4.__h = n2, u4.__V) : u4.__;
}
function P2(n2) {
  var u4 = r2.context[n2.__c], i4 = h2(t2++, 9);
  return i4.c = n2, u4 ? (null == i4.__ && (i4.__ = true, u4.sub(r2)), u4.props.value) : n2.__;
}
function j2() {
  for (var n2; n2 = f2.shift(); )
    if (n2.__P && n2.__H)
      try {
        n2.__H.__h.forEach(z2), n2.__H.__h.forEach(B2), n2.__H.__h = [];
      } catch (t3) {
        n2.__H.__h = [], e2.__e(t3, n2.__v);
      }
}
e2.__b = function(n2) {
  r2 = null, a2 && a2(n2);
}, e2.__ = function(n2, t3) {
  n2 && t3.__k && t3.__k.__m && (n2.__m = t3.__k.__m), d2 && d2(n2, t3);
}, e2.__r = function(n2) {
  v2 && v2(n2), t2 = 0;
  var i4 = (r2 = n2.__c).__H;
  i4 && (u2 === r2 ? (i4.__h = [], r2.__h = [], i4.__.forEach(function(n3) {
    n3.__N && (n3.__ = n3.__N), n3.__V = c2, n3.__N = n3.i = void 0;
  })) : (i4.__h.forEach(z2), i4.__h.forEach(B2), i4.__h = [], t2 = 0)), u2 = r2;
}, e2.diffed = function(n2) {
  l2 && l2(n2);
  var t3 = n2.__c;
  t3 && t3.__H && (t3.__H.__h.length && (1 !== f2.push(t3) && i2 === e2.requestAnimationFrame || ((i2 = e2.requestAnimationFrame) || w2)(j2)), t3.__H.__.forEach(function(n3) {
    n3.i && (n3.__H = n3.i), n3.__V !== c2 && (n3.__ = n3.__V), n3.i = void 0, n3.__V = c2;
  })), u2 = r2 = null;
}, e2.__c = function(n2, t3) {
  t3.some(function(n3) {
    try {
      n3.__h.forEach(z2), n3.__h = n3.__h.filter(function(n4) {
        return !n4.__ || B2(n4);
      });
    } catch (r3) {
      t3.some(function(n4) {
        n4.__h && (n4.__h = []);
      }), t3 = [], e2.__e(r3, n3.__v);
    }
  }), m2 && m2(n2, t3);
}, e2.unmount = function(n2) {
  s2 && s2(n2);
  var t3, r3 = n2.__c;
  r3 && r3.__H && (r3.__H.__.forEach(function(n3) {
    try {
      z2(n3);
    } catch (n4) {
      t3 = n4;
    }
  }), r3.__H = void 0, t3 && e2.__e(t3, r3.__v));
};
var k2 = "function" == typeof requestAnimationFrame;
function w2(n2) {
  var t3, r3 = function() {
    clearTimeout(u4), k2 && cancelAnimationFrame(t3), setTimeout(n2);
  }, u4 = setTimeout(r3, 100);
  k2 && (t3 = requestAnimationFrame(r3));
}
function z2(n2) {
  var t3 = r2, u4 = n2.__c;
  "function" == typeof u4 && (n2.__c = void 0, u4()), r2 = t3;
}
function B2(n2) {
  var t3 = r2;
  n2.__c = n2.__(), r2 = t3;
}
function C2(n2, t3) {
  return !n2 || n2.length !== t3.length || t3.some(function(t4, r3) {
    return t4 !== n2[r3];
  });
}

// src/components/context.ts
var AppContext = E({});
var context_default = AppContext;

// src/hooks/useContext.ts
var useContext = () => P2(context_default);
var useContext_default = useContext;

// src/components/NotePreview.tsx
var import_obsidian = require("obsidian");

// node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
var f3 = 0;
var i3 = Array.isArray;
function u3(e3, t3, n2, o3, i4, u4) {
  var a3, c3, p2 = {};
  for (c3 in t3)
    "ref" == c3 ? a3 = t3[c3] : p2[c3] = t3[c3];
  var l3 = { type: e3, props: p2, key: n2, ref: a3, __k: null, __: null, __b: 0, __e: null, __d: void 0, __c: null, constructor: void 0, __v: --f3, __i: -1, __u: 0, __source: i4, __self: u4 };
  if ("function" == typeof e3 && (a3 = e3.defaultProps))
    for (c3 in a3)
      void 0 === p2[c3] && (p2[c3] = a3[c3]);
  return l.vnode && l.vnode(l3), l3;
}

// src/components/NotePreview.tsx
var NotePreview = ({ note }) => {
  const { app, view, settings } = useContext_default();
  const ref = F2(null);
  void (async () => {
    const slicedContent = (await app.vault.cachedRead(note)).replace(/---.*?---/s, "").substring(0, settings.previewLength);
    if (ref.current) {
      ref.current.innerHTML = "";
      await import_obsidian.MarkdownRenderer.render(
        app,
        slicedContent,
        ref.current,
        note.path,
        view
      );
    }
  })();
  const onClick = (evt) => {
    const isMiddleButton = evt.button === 1;
    const newLeaf = import_obsidian.Keymap.isModEvent(evt) || isMiddleButton || settings.openInNewPane;
    void app.workspace.getLeaf(newLeaf).openFile(note);
  };
  if (settings.useCallout) {
    return /* @__PURE__ */ u3("div", { className: "callout", onMouseUp: onClick, children: [
      settings.showNoteTitle && /* @__PURE__ */ u3("div", { className: "callout-title", children: /* @__PURE__ */ u3("div", { className: "callout-title-inner", children: note.basename }) }),
      /* @__PURE__ */ u3("div", { className: "callout-content", ref })
    ] });
  }
  return /* @__PURE__ */ u3("div", { onMouseUp: onClick, children: [
    settings.showNoteTitle && /* @__PURE__ */ u3("h4", { children: note.basename }),
    /* @__PURE__ */ u3("small", { className: "markdown-rendered", children: settings.useQuote ? /* @__PURE__ */ u3("blockquote", { ref }) : /* @__PURE__ */ u3("div", { ref }) })
  ] });
};
var NotePreview_default = NotePreview;

// src/components/TimeSpan.tsx
var TimeSpan = ({ title, notes, wrapper }) => {
  const {
    settings: { dayMargin }
  } = useContext_default();
  if (!notes.length) {
    return null;
  }
  const component = /* @__PURE__ */ u3(g, { children: [
    /* @__PURE__ */ u3("h3", { children: [
      title,
      dayMargin ? /* @__PURE__ */ u3("small", { children: [
        " (+/- ",
        dayMargin,
        " day(s))"
      ] }) : "",
      ":"
    ] }),
    /* @__PURE__ */ u3("ul", { className: "list notes", children: notes.map((note) => /* @__PURE__ */ u3("li", { children: /* @__PURE__ */ u3(NotePreview_default, { note }) }, note.name)) })
  ] });
  if (wrapper) {
    return B(wrapper, {}, component);
  }
  return component;
};
var TimeSpan_default = TimeSpan;

// src/components/Main.tsx
var Main = ({ timeSpans }) => /* @__PURE__ */ u3("div", { id: "journal-review", children: [
  /* @__PURE__ */ u3("h2", { children: "On this day..." }),
  /* @__PURE__ */ u3("ul", { className: "list", children: timeSpans.map(({ title, notes }) => /* @__PURE__ */ u3(
    TimeSpan_default,
    {
      title,
      notes,
      wrapper: /* @__PURE__ */ u3("li", {})
    },
    title
  )) })
] });
var Main_default = Main;

// src/constants.ts
var import_obsidian2 = require("obsidian");
var import_obsidian_daily_notes_interface = __toESM(require_main());
var DEBOUNCE_DELAY = 1e3;
var VIEW_TYPE = "on-this-day-view";
var Unit = /* @__PURE__ */ ((Unit3) => {
  Unit3["day"] = "day";
  Unit3["week"] = "week";
  Unit3["month"] = "month";
  Unit3["year"] = "year";
  return Unit3;
})(Unit || {});
var defaultTimeSpans = [
  { number: 1, unit: "month" /* month */, recurring: false },
  { number: 6, unit: "month" /* month */, recurring: false },
  { number: 1, unit: "year" /* year */, recurring: true }
];
var DEFAULT_SETTINGS = {
  timeSpans: defaultTimeSpans,
  dayMargin: 0,
  previewLength: 100,
  useHumanize: true,
  useCallout: true,
  useQuote: true,
  openInNewPane: false,
  showNoteTitle: true,
  useNotifications: true,
  date: ""
};
var getTimeSpanTitle = ({ number, unit, recurring }) => `${recurring ? "every" : ""} ${number} ${unit}${number > 1 ? "s" : ""}`;
var getNotesOverMargins = (dayMargin, mom, allDailyNotes) => Array(dayMargin * 2 + 1).fill(0).map(
  (_, i4) => (0, import_obsidian_daily_notes_interface.getDailyNote)(
    (0, import_obsidian2.moment)(mom).add(i4 - dayMargin, "days"),
    allDailyNotes
  )
).filter(Boolean);
var reduceTimeSpans = (timeSpans, allDailyNotes, dayMargin, useHumanize) => {
  const oldestNoteDate = Object.values(allDailyNotes).reduce(
    (oldestDate, currentNote) => {
      const currentDate = (0, import_obsidian_daily_notes_interface.getDateFromFile)(currentNote, "day");
      return (currentDate == null ? void 0 : currentDate.isBefore(oldestDate)) ? currentDate : oldestDate;
    },
    (0, import_obsidian2.moment)()
  );
  return Object.values(
    timeSpans.reduce(
      (acc, { number, unit, recurring }) => {
        const mom = (0, import_obsidian2.moment)();
        do {
          mom.subtract(number, unit);
          const title = useHumanize ? mom.fromNow() : `${getTimeSpanTitle({
            number: (0, import_obsidian2.moment)().diff(mom, unit),
            unit
          })} ago`;
          const notes = getNotesOverMargins(dayMargin, mom, allDailyNotes);
          if (notes.length) {
            acc[title] = {
              title,
              moment: mom,
              notes: acc[title] ? acc[title].notes.concat(notes) : notes
            };
          }
        } while (mom.isAfter(oldestNoteDate) && recurring);
        return acc;
      },
      {}
    )
  ).sort((a3, b2) => a3.moment.isAfter(b2.moment) ? -1 : 1);
};

// src/view.tsx
var OnThisDayView = class extends import_obsidian3.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.icon = icon;
    this.settings = settings;
    this.registerEvent(
      this.app.vault.on("create", (file) => {
        if ((0, import_obsidian_daily_notes_interface2.getDateFromFile)(file, "day")) {
          this.renderView();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("delete", (file) => {
        if ((0, import_obsidian_daily_notes_interface2.getDateFromFile)(file, "day")) {
          this.renderView();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file) => {
        if ((0, import_obsidian_daily_notes_interface2.getDateFromFile)(file, "day")) {
          this.renderView();
        }
      })
    );
    this.registerInterval(
      window.setInterval(
        () => {
          if ((/* @__PURE__ */ new Date()).getHours() === 0) {
            this.renderView();
          }
        },
        60 * 60 * 1e3
      )
    );
  }
  getViewType() {
    return VIEW_TYPE;
  }
  getDisplayText() {
    return "On this day";
  }
  renderView() {
    const container = this.containerEl.children[1];
    const hasDailyNotesPluginLoaded = (0, import_obsidian_daily_notes_interface2.appHasDailyNotesPluginLoaded)();
    if (!hasDailyNotesPluginLoaded) {
      container.createEl("b", {
        text: "Daily notes plugin not loaded"
      });
      return;
    }
    const timeSpans = reduceTimeSpans(
      this.settings.timeSpans,
      (0, import_obsidian_daily_notes_interface2.getAllDailyNotes)(),
      this.settings.dayMargin,
      this.settings.useHumanize
    );
    N(
      /* @__PURE__ */ u3(
        context_default.Provider,
        {
          value: {
            app: this.app,
            view: this,
            settings: this.settings
          },
          children: /* @__PURE__ */ u3(Main_default, { timeSpans })
        }
      ),
      container
    );
  }
  // eslint-disable-next-line @typescript-eslint/require-await
  async onOpen() {
    this.renderView();
  }
  async onClose() {
  }
};

// src/settingsTab.ts
var import_obsidian4 = require("obsidian");
var getMaxTimeSpan = (unit) => {
  switch (unit) {
    case "day" /* day */:
      return 31;
    case "week" /* week */:
      return 52;
    case "month" /* month */:
      return 24;
    case "year" /* year */:
      return 100;
  }
};
var SettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Journal Review" });
    containerEl.createEl("h2", { text: "Time Spans" });
    containerEl.createEl("p", {
      cls: "setting-item-description",
      text: "Define time spans to review, e.g. '1 month' or 'every 6 months'"
    });
    const container = containerEl.createEl("ul");
    container.addClass("time-spans-container");
    this.plugin.settings.timeSpans.forEach(
      ({ number, unit, recurring }, index) => {
        const timeSpanContainer = container.createEl("li");
        new import_obsidian4.Setting(timeSpanContainer).setName(`Time span #${index + 1}`).setDesc(getTimeSpanTitle({ number, unit, recurring })).addSlider(
          (slider) => slider.setValue(number).setLimits(1, getMaxTimeSpan(unit), 1).setDynamicTooltip().onChange(
            (0, import_obsidian4.debounce)(
              (value) => {
                this.plugin.settings.timeSpans[index].number = value;
                void this.plugin.saveSettings();
                this.display();
              },
              DEBOUNCE_DELAY,
              true
            )
          )
        ).addDropdown(
          (dropdown) => dropdown.addOptions(Unit).setValue(unit).onChange((value) => {
            this.plugin.settings.timeSpans[index].unit = value;
            void this.plugin.saveSettings();
            this.display();
          })
        ).addToggle(
          (toggle) => toggle.setValue(Boolean(recurring)).onChange((value) => {
            this.plugin.settings.timeSpans[index].recurring = value;
            void this.plugin.saveSettings();
            this.display();
          }).setTooltip("Recurring?")
        ).addButton((button) => {
          button.setButtonText("X").setIcon("delete").setTooltip("Delete").onClick(() => {
            this.plugin.settings.timeSpans.splice(index, 1);
            void this.plugin.saveSettings();
            this.display();
          });
        });
      }
    );
    new import_obsidian4.Setting(container.createEl("li")).addButton(
      (button) => button.setCta().setButtonText("Add Time Span").onClick(() => {
        this.plugin.settings.timeSpans.push({
          ...defaultTimeSpans[0]
        });
        void this.plugin.saveSettings();
        this.display();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("Show Note Title with previews").setDesc(
      "Render the note title above the preview text, when showing note previews."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showNoteTitle).onChange((value) => {
        this.plugin.settings.showNoteTitle = value;
        void this.plugin.saveSettings();
      })
    );
    const humanizeDescription = new DocumentFragment();
    humanizeDescription.textContent = "Use the 'humanization' feature from moment.js, when rendering the time spans titles. ";
    humanizeDescription.createEl("a", {
      text: "More info",
      attr: {
        href: "https://momentjs.com/docs/#/durations/humanize/"
      }
    });
    new import_obsidian4.Setting(containerEl).setName("Humanize Time Spans").setDesc(humanizeDescription).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useHumanize).onChange((value) => {
        this.plugin.settings.useHumanize = value;
        void this.plugin.saveSettings();
      })
    );
    const calloutsDescription = new DocumentFragment();
    calloutsDescription.textContent = "Use callouts to render note previews, using their styles based on current theme. ";
    calloutsDescription.createEl("a", {
      text: "More info",
      attr: {
        href: "https://help.obsidian.md/Editing+and+formatting/Callouts"
      }
    });
    new import_obsidian4.Setting(containerEl).setName("Use Obsidian callouts for note previews").setDesc(calloutsDescription).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.useCallout).onChange((value) => {
        this.plugin.settings.useCallout = value;
        void this.plugin.saveSettings();
        this.display();
      })
    );
    if (!this.plugin.settings.useCallout) {
      new import_obsidian4.Setting(containerEl).setName("Use quote element for note previews").setDesc("Format note previews using the HTML quote element").addToggle(
        (toggle) => toggle.setValue(this.plugin.settings.useQuote).onChange((value) => {
          this.plugin.settings.useQuote = value;
          void this.plugin.saveSettings();
        })
      );
    }
    new import_obsidian4.Setting(containerEl).setName("Lookup Margin").setDesc(
      "The number of days to include before and after the date being checked"
    ).addSlider((slider) => {
      slider.setValue(this.plugin.settings.dayMargin).setDynamicTooltip().onChange((value) => {
        this.plugin.settings.dayMargin = value;
        void this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Preview Length").setDesc("Length of the preview text to show for each note").addSlider((slider) => {
      slider.setValue(this.plugin.settings.previewLength).setDynamicTooltip().setLimits(0, 1e3, 10).onChange((value) => {
        this.plugin.settings.previewLength = value;
        void this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Open in new pane").setDesc("Open the notes in a new pane/tab by default").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.openInNewPane).onChange((value) => {
        this.plugin.settings.openInNewPane = value;
        void this.plugin.saveSettings();
      });
    });
    new import_obsidian4.Setting(containerEl).setName("Use notifications").setDesc(
      "Use notifications (inside Obsidian) to let you know, when there are new journal entries to review. This will happen when Obsidian is focused and it's a new day."
    ).addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.useNotifications).onChange((value) => {
        this.plugin.settings.useNotifications = value;
        void this.plugin.saveSettings();
      });
    });
  }
};

// src/main.ts
var icon = "calendar-clock";
var label = "Open 'On this day' view";
var JournalReviewPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.checkIsNewDay = () => {
      if (!this.settings.date || (0, import_obsidian5.moment)(/* @__PURE__ */ new Date()).isAfter(this.settings.date, "day")) {
        this.settings.date = (/* @__PURE__ */ new Date()).toISOString();
        void this.saveSettings();
        const noteCount = reduceTimeSpans(
          this.settings.timeSpans,
          (0, import_obsidian_daily_notes_interface3.getAllDailyNotes)(),
          this.settings.dayMargin,
          this.settings.useHumanize
        ).reduce((count, timeSpan) => count + timeSpan.notes.length, 0);
        if (noteCount) {
          new import_obsidian5.Notice(
            `It's a new day! You have ${noteCount} journal entries to review. Open the "On this day" view to see them.`,
            0
          );
        }
      }
    };
    this.setupFocusListener = () => {
      if (this.settings.useNotifications) {
        setTimeout(this.checkIsNewDay, 1e3);
        addEventListener("focus", this.checkIsNewDay);
      } else {
        removeEventListener("focus", this.checkIsNewDay);
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon(icon, label, () => {
      void this.activateView();
    });
    this.addCommand({
      id: "open-on-this-day",
      name: label,
      callback: () => this.activateView()
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    this.registerView(
      VIEW_TYPE,
      (leaf) => new OnThisDayView(leaf, this.settings)
    );
    this.setupFocusListener();
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE, active: true }));
    }
    workspace.revealLeaf(leaf);
  }
  onunload() {
    removeEventListener("focus", this.checkIsNewDay);
  }
  async loadSettings() {
    var _a;
    const loadedData = await this.loadData();
    const parsedData = loadedData;
    if (((_a = loadedData == null ? void 0 : loadedData.timeSpans) == null ? void 0 : _a.length) && loadedData.timeSpans[0].hasOwnProperty("length")) {
      parsedData.timeSpans = loadedData.timeSpans.map(
        ([number, unit]) => ({
          number,
          unit: unit.endsWith("s") ? unit.slice(0, -1) : unit,
          recurring: false
        })
      );
    }
    this.settings = Object.assign({}, DEFAULT_SETTINGS, parsedData);
  }
  async saveSettings() {
    var _a, _b;
    await this.saveData(this.settings);
    (_b = (_a = this.app.workspace.getLeavesOfType(VIEW_TYPE)[0]) == null ? void 0 : _a.view) == null ? void 0 : _b.renderView();
    this.setupFocusListener();
  }
};
